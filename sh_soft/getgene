
#主要是对vcf和gtf进行操作，提取指定染色体或指定区域的基因。

#提取输入的gtf文件中所有基因
function get_all_gene(){
	gtf=$1
	output=$2
	#检测是否存在该文件，如果有，则自动删除旧版本
	if [ -e $output ]; then
		echo "已存在输出文件 ${output},自动删除旧版本。"
		rm -rf $output
	fi
	cat $gtf|awk '$3=="gene" {print $0}' >$output
}

#提取指定区域的vcf.
function get_vcf_region(){
	input_vcf=$1
	region=$2
	output_vcf=$3
	#检测是否存在该文件，如果有，则自动删除旧版本
	if [ -e $output_vcf ]; then
		echo "已存在输出文件 ${output_vcf},自动删除旧版本。"
		rm -rf $output_vcf
	fi
	

	#先把源文件的头部输出到输出文件的头部
	cat $input_vcf | grep "^#" >$output_vcf
	#判断输入区域是染色体还是一段区域
	if [[ $region == *:*-* ]]; then
		#正则匹配格式*:*-*
		chr=`echo $region |cut -d ':' -f1`
		left_region=`echo $region |awk -F ":" '{print $2}'|cut -d '-' -f1`
		right_region=`echo $region |cut -d '-' -f2`
		#检测用户输入的染色体是否存在
		if [ `cat $input_vcf | awk '{print $1}'| grep -c "$chr" ` -eq '0' ];then
			echo "input the chromosome style is not found in the origin VCF! please check it is (chr10 or 10)."
			exit 1
		fi
		#提取指定区域的vcf
		eval "cat $input_vcf |grep -v \"^#\"| awk '\$1 == "$chr" && \$2 >= $left_region && \$2 <= $right_region {print \$0} ' >>$output_vcf"
	elif [[ $region =~ - ]]; then
		#正则匹配格式里包含-，但是格式不正确的情况，例如：10：100000-
		echo "please check your input region style."
	else
		#检测用户输入的染色体是否存在
		if [ `cat $input_vcf | awk '{print $1}'|grep -c "$region" ` -eq '0' ];then
			echo "input the chromosome style is not found in the origin VCF! please check it is (chr10 or 10)."
			exit 1
		fi
		#提取整条染色体的命令
		eval "cat $input_vcf | grep -v \"^#\" |awk '\$1 == $region {print \$0}' >>$output_vcf"
	fi
	
} 

#提取输入的gtf文件中，指定区域的基因（区域可以是chr1:11455324-22001042或者chr1）
function get_gtf_gene(){
	gtf=$1
	region=$2
	output_gtf=$3
	#检测是否存在该文件，如果有，则自动删除旧版本
	if [ -e $output_gtf ]; then
		echo "已存在输出文件 ${output},自动删除旧版本。"
		rm -rf $output_gtf
	fi

	#判断输入区域是染色体还是一段区域
	if [[ $region == *:*-* ]]; then
		#test=10:51549498-51590734
		chr=${region%%:*}  #删除：右边的字符
		left_region=`echo $region | cut -d "-" -f1 |cut -d ":" -f2`  # -左边第一个，:分割第2个。
		right_region=${region##*-} #删除-左边字符，保留右边字符
		#检测用户输入的染色体是否存在
		if [ `cat $gtf | awk '{print $1}'|grep -c "$chr" ` -eq '0' ];then
			echo "input the chromosome style is not found in the origin gtf! please check it is (chr10 or 10)."
			exit 1
		fi
		#多重转义字符，最后再执行命令。
		eval "cat $gtf | awk '\$3 == \"gene\" && \$1 == "$chr" && \$4 >= ${left_region} && \$5 <= ${right_region} {print \$0}' >$output_gtf"
	elif [[ $region =~ - ]] ; then
		echo "please check your input region style."
	else
		#检测用户输入的染色体是否存在
		if [ `cat $gtf | awk '{print $1}'|grep -c "$region" ` -eq '0' ];then
			echo "input the chromosome style is not found in the origin gtf! please check it is (chr10 or 10)."
			exit 1
		fi
		#当awk和shell共同存在$1变量时候，需要先使用\转义$,才能使用awk里的$1,不然使用的是输入变量$1
		eval "cat $gtf | awk '\$3 == \"gene\" && \$1 == "$region" {print \$0 }' >$output_gtf "
	fi
	
}

case $1 in
	-h|--help)
echo -e "Usage \n
  -h help;\n
  getgene -A/get_all_gene inputgtf outputgtf \n
  getgene -gvr/get_vcf_region inputvcf region outputvcf (region example: chr10:1549498-1590734 or 10:1549498-1590734 or chr10 or 10) \n
  getgene -gtg/get_gtf_gene inputgtf region output (region example: chr10:1549498-1590734 or 10:1549498-1590734 or chr10 or 10)
	
	
Example
  
  #  get all gene from gtf.  
  getgene get_all_gene hg19.gtf hg19.all_gene.gtf
  getgene -A hg19.gtf hg19.all_gene.gtf
  #  get some region gene from vcf
  getgene get_vcf_region RIL334.pass.vcf 10:51549498-51590734 region.out.vcf
  getgene -gvr RIL334.pass.vcf 10:51549498-51590734 region.out.vcf
  # get chr10 vcf from genome vcf 
  getgene get_vcf_region RIL334.pass.vcf chr10 chr10.RIL334.vcf
  getgene -gvr RIL334.pass.vcf 10 out.10.RIL334.vcf
  
  #get some region gene from gtf
  getgene get_gtf_gene hg19.gtf 10:51549498-51590734 chr10.candidate.gtf
  getgene -gtg hg19.gtf 10:51549498-51590734 chr10.candidate.gtf
  getgene -gtg hg19.gtf 10 10.candidate.gtf
  
  
Note:
Region can be chr10 or 10 or chr10:1549498-1590734 or 10:1549498-1590734 ,but the  chromosome must be same with the input gtf/vcf file.   
"
		;;
	get_all_gene | -A)
		get_all_gene $2 $3
		  if [ $? -eq 0 ];                  #判断函数运行返回值，等于0，则成功，不等于0，则检查用户的输入，告知错误原因！
		  then
			echo "success!"
		  elif ! [ -n "$3" ];
		  then
			echo "please add the output filename!"
		  else
			echo "Please check your input info ,exchange file not success!"
		  fi
		;;
	get_gtf_gene | -gtg)
		get_gtf_gene $2 $3 $4
		  if [ $? -eq 0 ];                  #判断函数运行返回值，等于0，则成功，不等于0，则检查用户的输入，告知错误原因！
		  then
			echo "success!"
		  elif ! [ -n "$4" ];
		  then
			echo "please add the output filename!"
		  else
			echo "Please check your input info ,exchange file not success!"
		  fi
		;;
	get_vcf_region | -gvr)
		get_vcf_region $2 $3 $4
		  if [ $? -eq 0 ];                  #判断函数运行返回值，等于0，则成功，不等于0，则检查用户的输入，告知错误原因！
		  then
			echo "success!"
		  elif ! [ -n "$4" ];
		  then
			echo "please add the output filename!"
		  else
			echo "Please check your input info ,exchange file not success!"
		  fi
		;;
		*)
	  echo "Input info is wrong,please test input -h or --help for the help info!"
	  ;;
esac	  
